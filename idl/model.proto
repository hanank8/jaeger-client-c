// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package jaeger.model;

import "timestamp.proto";
import "duration.proto";

enum ValueType {
  STRING  = 0;
  BOOL    = 1;
  INT64   = 2;
  FLOAT64 = 3;
  BINARY  = 4;
};

message KeyValue {
  string    key      = 1;
  ValueType v_type    = 2;
  string    v_str     = 3;
  bool      v_bool    = 4;
  int64     v_int64   = 5;
  double    v_float64 = 6;
  bytes     v_binary  = 7;
}

message Log {
  google.protobuf.Timestamp timestamp = 1;
  repeated KeyValue fields = 2;
}

enum SpanRefType {
  CHILD_OF = 0;
  FOLLOWS_FROM = 1;
};

message SpanRef {
  bytes trace_id = 1;
  bytes span_id = 2;
  SpanRefType ref_type = 3;
}

message Process {
  string service_name = 1;
  repeated KeyValue tags = 2;
}

message Span {
  bytes trace_id = 1;
  bytes span_id = 2;
  string operation_name = 3;
  repeated SpanRef references = 4;
  uint32 flags = 5;
  google.protobuf.Timestamp start_time = 6;
  google.protobuf.Duration duration = 7;
  repeated KeyValue tags = 8;
  repeated Log logs = 9;
  Process process = 10;
  string process_id = 11;
  repeated string warnings = 12;
}

message Trace {
  message ProcessMapping {
      string process_id = 1;
      Process process = 2;
  }
  repeated Span spans = 1;
  repeated ProcessMapping process_map = 2;
  repeated string warnings = 3;
}

message Batch {
    repeated Span spans = 1;
    Process process = 2;
}

message PostSpansRequest {
    Batch batch = 1;
}

message PostSpansResponse {
    bool ok = 1;
}

// TODO: move services to another proto file.
service CollectorServiceV2 {
    rpc PostSpans(PostSpansRequest) returns (PostSpansResponse);
}

message GetTraceRequest {
    string id = 1;
}

message GetTraceResponse {
    Trace trace = 1;
}

service QueryServiceV2 {
    rpc GetTrace(GetTraceRequest) returns (GetTraceResponse);
}
